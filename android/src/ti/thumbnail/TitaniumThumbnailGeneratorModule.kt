/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package ti.thumbnail

import android.graphics.Bitmap
import android.graphics.pdf.PdfRenderer
import android.os.Build
import android.os.ParcelFileDescriptor
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.KrollFunction
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.Log
import java.io.File
import java.util.concurrent.Executors

@Kroll.module(name = "TitaniumThumbnailGenerator", id = "ti.thumbnail")
class TitaniumThumbnailGeneratorModule : KrollModule() {

    // Methods

    @Kroll.method
    fun generateThumbnail(params: KrollDict) {
        val url = params.getString("url")
        val size = params.getKrollDict("size")
        val callback = params["callback"] as? KrollFunction

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
            callback?.callAsync(getKrollObject(), KrollDict())
            return
        }

        generateThumbnailFromPdf(url, size["width"] as Int, object : TiThumbnailCallback {
            override fun onThumbnailGenerated(thumbnail: Bitmap?) {
                val event = KrollDict()
                event["success"] = thumbnail != null
                if (thumbnail != null) {
                    event["image"] = thumbnail
                }
                callback?.callAsync(getKrollObject(), event)
            }
        })
    }

    interface TiThumbnailCallback {
        fun onThumbnailGenerated(thumbnail: Bitmap?)
    }

    private fun generateThumbnailFromPdf(
        pdfPath: String,
        size: Int,
        callback: TiThumbnailCallback
    ) {
        val executor = Executors.newSingleThreadExecutor()

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
            callback.onThumbnailGenerated(null)
            return
        }

        executor.execute {
            try {
                // Step 1: Open the PDF and render the first page into a Bitmap
                val fileDescriptor =
                    ParcelFileDescriptor.open(File(pdfPath), ParcelFileDescriptor.MODE_READ_ONLY)
                val pdfRenderer = PdfRenderer(fileDescriptor)
                val pageCount = pdfRenderer.pageCount

                if (pageCount > 0) {
                    val page = pdfRenderer.openPage(0)
                    val bitmap =
                        Bitmap.createBitmap(page.width, page.height, Bitmap.Config.ARGB_8888)
                    page.render(bitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY)

                    // Step 2: Scale the Bitmap to thumbnail size (assuming a fixed size here)
                    val thumbnail = Bitmap.createScaledBitmap(
                        bitmap, size,
                        (size * page.height / page.width), true
                    )

                    // Step 3: Notify callback with the path to the cached image
                    callback.onThumbnailGenerated(thumbnail)
                } else {
                    callback.onThumbnailGenerated(null)
                }

                pdfRenderer.close()
                fileDescriptor.close()
            } catch (e: Exception) {
                Log.e("TiThumbnail", e.message)
                callback.onThumbnailGenerated(null)
            }
        }
    }
}
